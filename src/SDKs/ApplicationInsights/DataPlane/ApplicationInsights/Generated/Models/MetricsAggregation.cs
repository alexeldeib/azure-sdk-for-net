// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.ApplicationInsights.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for MetricsAggregation.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum MetricsAggregation
    {
        [EnumMember(Value = "min")]
        Min,
        [EnumMember(Value = "max")]
        Max,
        [EnumMember(Value = "avg")]
        Avg,
        [EnumMember(Value = "sum")]
        Sum,
        [EnumMember(Value = "count")]
        Count,
        [EnumMember(Value = "unique")]
        Unique
    }
    internal static class MetricsAggregationEnumExtension
    {
        internal static string ToSerializedValue(this MetricsAggregation? value)
        {
            return value == null ? null : ((MetricsAggregation)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this MetricsAggregation value)
        {
            switch( value )
            {
                case MetricsAggregation.Min:
                    return "min";
                case MetricsAggregation.Max:
                    return "max";
                case MetricsAggregation.Avg:
                    return "avg";
                case MetricsAggregation.Sum:
                    return "sum";
                case MetricsAggregation.Count:
                    return "count";
                case MetricsAggregation.Unique:
                    return "unique";
            }
            return null;
        }

        internal static MetricsAggregation? ParseMetricsAggregation(this string value)
        {
            switch( value )
            {
                case "min":
                    return MetricsAggregation.Min;
                case "max":
                    return MetricsAggregation.Max;
                case "avg":
                    return MetricsAggregation.Avg;
                case "sum":
                    return MetricsAggregation.Sum;
                case "count":
                    return MetricsAggregation.Count;
                case "unique":
                    return MetricsAggregation.Unique;
            }
            return null;
        }
    }
}
